{"ts":1362682161232,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1362682163792,"patch":[[{"diffs":[[1,"function md5 (str) {\r\n  // http://kevin.vanzonneveld.net\r\n  // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)\r\n  // + namespaced by: Michael White (http://getsprink.com)\r\n  // +    tweaked by: Jack\r\n  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\r\n  // +      input by: Brett Zamir (http://brett-zamir.me)\r\n  // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\r\n  // -    depends on: utf8_encode\r\n  // *     example 1: md5('Kevin van Zonneveld');\r\n  // *     returns 1: '6e658d4bfcb59cc13f96c14450ac40b9'\r\n  var xl;\r\n\r\n  var rotateLeft = function (lValue, iShiftBits) {\r\n    return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));\r\n  };\r\n\r\n  var addUnsigned = function (lX, lY) {\r\n    var lX4, lY4, lX8, lY8, lResult;\r\n    lX8 = (lX & 0x80000000);\r\n    lY8 = (lY & 0x80000000);\r\n    lX4 = (lX & 0x40000000);\r\n    lY4 = (lY & 0x40000000);\r\n    lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);\r\n    if (lX4 & lY4) {\r\n      return (lResult ^ 0x80000000 ^ lX8 ^ lY8);\r\n    }\r\n    if (lX4 | lY4) {\r\n      if (lResult & 0x40000000) {\r\n        return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);\r\n      } else {\r\n        return (lResult ^ 0x40000000 ^ lX8 ^ lY8);\r\n      }\r\n    } else {\r\n      return (lResult ^ lX8 ^ lY8);\r\n    }\r\n  };\r\n\r\n  var _F = function (x, y, z) {\r\n    return (x & y) | ((~x) & z);\r\n  };\r\n  var _G = function (x, y, z) {\r\n    return (x & z) | (y & (~z));\r\n  };\r\n  var _H = function (x, y, z) {\r\n    return (x ^ y ^ z);\r\n  };\r\n  var _I = function (x, y, z) {\r\n    return (y ^ (x | (~z)));\r\n  };\r\n\r\n  var _FF = function (a, b, c, d, x, s, ac) {\r\n    a = addUnsigned(a, addUnsigned(addUnsigned(_F(b, c, d), x), ac));\r\n    return addUnsigned(rotateLeft(a, s), b);\r\n  };\r\n\r\n  var _GG = function (a, b, c, d, x, s, ac) {\r\n    a = addUnsigned(a, addUnsigned(addUnsigned(_G(b, c, d), x), ac));\r\n    return addUnsigned(rotateLeft(a, s), b);\r\n  };\r\n\r\n  var _HH = function (a, b, c, d, x, s, ac) {\r\n    a = addUnsigned(a, addUnsigned(addUnsigned(_H(b, c, d), x), ac));\r\n    return addUnsigned(rotateLeft(a, s), b);\r\n  };\r\n\r\n  var _II = function (a, b, c, d, x, s, ac) {\r\n    a = addUnsigned(a, addUnsigned(addUnsigned(_I(b, c, d), x), ac));\r\n    return addUnsigned(rotateLeft(a, s), b);\r\n  };\r\n\r\n  var convertToWordArray = function (str) {\r\n    var lWordCount;\r\n    var lMessageLength = str.length;\r\n    var lNumberOfWords_temp1 = lMessageLength + 8;\r\n    var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;\r\n    var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;\r\n    var lWordArray = new Array(lNumberOfWords - 1);\r\n    var lBytePosition = 0;\r\n    var lByteCount = 0;\r\n    while (lByteCount < lMessageLength) {\r\n      lWordCount = (lByteCount - (lByteCount % 4)) / 4;\r\n      lBytePosition = (lByteCount % 4) * 8;\r\n      lWordArray[lWordCount] = (lWordArray[lWordCount] | (str.charCodeAt(lByteCount) << lBytePosition));\r\n      lByteCount++;\r\n    }\r\n    lWordCount = (lByteCount - (lByteCount % 4)) / 4;\r\n    lBytePosition = (lByteCount % 4) * 8;\r\n    lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition);\r\n    lWordArray[lNumberOfWords - 2] = lMessageLength << 3;\r\n    lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;\r\n    return lWordArray;\r\n  };\r\n\r\n  var wordToHex = function (lValue) {\r\n    var wordToHexValue = \"\",\r\n      wordToHexValue_temp = \"\",\r\n      lByte, lCount;\r\n    for (lCount = 0; lCount <= 3; lCount++) {\r\n      lByte = (lValue >>> (lCount * 8)) & 255;\r\n      wordToHexValue_temp = \"0\" + lByte.toString(16);\r\n      wordToHexValue = wordToHexValue + wordToHexValue_temp.substr(wordToHexValue_temp.length - 2, 2);\r\n    }\r\n    return wordToHexValue;\r\n  };\r\n\r\n  var x = [],\r\n    k, AA, BB, CC, DD, a, b, c, d, S11 = 7,\r\n    S12 = 12,\r\n    S13 = 17,\r\n    S14 = 22,\r\n    S21 = 5,\r\n    S22 = 9,\r\n    S23 = 14,\r\n    S24 = 20,\r\n    S31 = 4,\r\n    S32 = 11,\r\n    S33 = 16,\r\n    S34 = 23,\r\n    S41 = 6,\r\n    S42 = 10,\r\n    S43 = 15,\r\n    S44 = 21;\r\n\r\n  str = this.utf8_encode(str);\r\n  x = convertToWordArray(str);\r\n  a = 0x67452301;\r\n  b = 0xEFCDAB89;\r\n  c = 0x98BADCFE;\r\n  d = 0x10325476;\r\n\r\n  xl = x.length;\r\n  for (k = 0; k < xl; k += 16) {\r\n    AA = a;\r\n    BB = b;\r\n    CC = c;\r\n    DD = d;\r\n    a = _FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);\r\n    d = _FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);\r\n    c = _FF(c, d, a, b, x[k + 2], S13, 0x242070DB);\r\n    b = _FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);\r\n    a = _FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);\r\n    d = _FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);\r\n    c = _FF(c, d, a, b, x[k + 6], S13, 0xA8304613);\r\n    b = _FF(b, c, d, a, x[k + 7], S14, 0xFD469501);\r\n    a = _FF(a, b, c, d, x[k + 8], S11, 0x698098D8);\r\n    d = _FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);\r\n    c = _FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);\r\n    b = _FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);\r\n    a = _FF(a, b, c, d, x[k + 12], S11, 0x6B901122);\r\n    d = _FF(d, a, b, c, x[k + 13], S12, 0xFD987193);\r\n    c = _FF(c, d, a, b, x[k + 14], S13, 0xA679438E);\r\n    b = _FF(b, c, d, a, x[k + 15], S14, 0x49B40821);\r\n    a = _GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);\r\n    d = _GG(d, a, b, c, x[k + 6], S22, 0xC040B340);\r\n    c = _GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);\r\n    b = _GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);\r\n    a = _GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);\r\n    d = _GG(d, a, b, c, x[k + 10], S22, 0x2441453);\r\n    c = _GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);\r\n    b = _GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);\r\n    a = _GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);\r\n    d = _GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);\r\n    c = _GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);\r\n    b = _GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);\r\n    a = _GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);\r\n    d = _GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);\r\n    c = _GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);\r\n    b = _GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);\r\n    a = _HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);\r\n    d = _HH(d, a, b, c, x[k + 8], S32, 0x8771F681);\r\n    c = _HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);\r\n    b = _HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);\r\n    a = _HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);\r\n    d = _HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);\r\n    c = _HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);\r\n    b = _HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);\r\n    a = _HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);\r\n    d = _HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);\r\n    c = _HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);\r\n    b = _HH(b, c, d, a, x[k + 6], S34, 0x4881D05);\r\n    a = _HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);\r\n    d = _HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);\r\n    c = _HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);\r\n    b = _HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);\r\n    a = _II(a, b, c, d, x[k + 0], S41, 0xF4292244);\r\n    d = _II(d, a, b, c, x[k + 7], S42, 0x432AFF97);\r\n    c = _II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);\r\n    b = _II(b, c, d, a, x[k + 5], S44, 0xFC93A039);\r\n    a = _II(a, b, c, d, x[k + 12], S41, 0x655B59C3);\r\n    d = _II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);\r\n    c = _II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);\r\n    b = _II(b, c, d, a, x[k + 1], S44, 0x85845DD1);\r\n    a = _II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);\r\n    d = _II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);\r\n    c = _II(c, d, a, b, x[k + 6], S43, 0xA3014314);\r\n    b = _II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);\r\n    a = _II(a, b, c, d, x[k + 4], S41, 0xF7537E82);\r\n    d = _II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);\r\n    c = _II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);\r\n    b = _II(b, c, d, a, x[k + 9], S44, 0xEB86D391);\r\n    a = addUnsigned(a, AA);\r\n    b = addUnsigned(b, BB);\r\n    c = addUnsigned(c, CC);\r\n    d = addUnsigned(d, DD);\r\n  }\r\n\r\n  var temp = wordToHex(a) + wordToHex(b) + wordToHex(c) + wordToHex(d);\r\n\r\n  return temp.toLowerCase();\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":7877}]],"length":7877,"saved":false}
{"contributors":[],"silentsave":false,"ts":1362683155927,"patch":[[{"diffs":[[0," md5"],[-1," (str) {\r\n  // http://kevin.vanzonneveld.net\r\n  // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)\r\n  // + namespaced by: Michael White (http://getsprink.com)\r\n  // +    tweaked by: Jack\r\n  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\r\n  // +      input by: Brett Zamir (http://brett-zamir.me)\r\n  // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\r\n  // -    depends on: utf8_encode\r\n  // *     example 1: md5('Kevin van Zonneveld');\r\n  // *     returns 1: '6e658d4bfcb59cc13f96c14450ac40b9'\r\n  var xl;\r\n\r\n  var rotateLeft = function (lValue, iShiftBits) {\r\n    return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));\r\n  };\r\n\r\n  var addUnsigned = function (lX, lY) {\r\n    var lX4, lY4, lX8, lY8, lResult;\r\n    lX8 = (lX & 0x80000000);\r\n    lY8 = (lY & 0x80000000);\r\n    lX4 = (lX & 0x40000000);\r\n    lY4 = (lY & 0x40000000);\r\n    lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);\r\n    if (lX4 & lY4) {\r\n      return (lResult ^ 0x80000000 ^ lX8 ^ lY8);\r\n    }\r\n    if (lX4 | lY4) {\r\n      if (lResult & 0x40000000) {\r\n        return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);\r\n      } else {\r\n        return (lResult ^ 0x40000000 ^ lX8 ^ lY8);\r\n      }\r\n    } else {\r\n      return (lResult ^ lX8 ^ lY8);\r\n    }\r\n  };\r\n\r\n  var _F = function (x, y, z) {\r\n    return (x & y) | ((~x) & z);\r\n  };\r\n  var _G = function (x, y, z) {\r\n    return (x & z) | (y & (~z));\r\n  };\r\n  var _H = function (x, y, z) {\r\n    return (x ^ y ^ z);\r\n  };\r\n  var _I = function (x, y, z) {\r\n    return (y ^ (x | (~z)));\r\n  };\r\n\r\n  var _FF = function (a, b, c, d, x, s, ac) {\r\n    a = addUnsigned(a, addUnsigned(addUnsigned(_F(b, c, d), x), ac));\r\n    return addUnsigned(rotateLeft(a, s), b);\r\n  };\r\n\r\n  var _GG = function (a, b, c, d, x, s, ac) {\r\n    a = addUnsigned(a, addUnsigned(addUnsigned(_G(b, c, d), x), ac));\r\n    return addUnsigned(rotateLeft(a, s), b);\r\n  };\r\n\r\n  var _HH = function (a, b, c, d, x, s, ac) {\r\n    a = addUnsigned(a, addUnsigned(addUnsigned(_H(b, c, d), x), ac));\r\n    return addUnsigned(rotateLeft(a, s), b);\r\n  };\r\n\r\n  var _II = function (a, b, c, d, x, s, ac) {\r\n    a = addUnsigned(a, addUnsigned(addUnsigned(_I(b, c, d), x), ac));\r\n    return addUnsigned(rotateLeft(a, s), b);\r\n  };\r\n\r\n  var convertToWordArray = function (str) {\r\n    var lWordCount;\r\n    var lMessageLength = str.length;\r\n    var lNumberOfWords_temp1 = lMessageLength + 8;\r\n    var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;\r\n    var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;\r\n    var lWordArray = new Array(lNumberOfWords - 1);\r\n    var lBytePosition = 0;\r\n    var lByteCount = 0;\r\n    while (lByteCount < lMessageLength) {\r\n      lWordCount = (lByteCount - (lByteCount % 4)) / 4;\r\n      lBytePosition = (lByteCount % 4) * 8;\r\n      lWordArray[lWordCount] = (lWordArray[lWordCount] | (str.charCodeAt(lByteCount) << lBytePosition));\r\n      lByteCount++;\r\n    }\r\n    lWordCount = (lByteCount - (lByteCount % 4)) / 4;\r\n    lBytePosition = (lByteCount % 4) * 8;\r\n    lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition);\r\n    lWordArray[lNumberOfWords - 2] = lMessageLength << 3;\r\n    lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;\r\n    return lWordArray;\r\n  };\r\n\r\n  var wordToHex = function (lValue) {\r\n    var wordToHexValue = \"\",\r\n      wordToHexValue_temp = \"\",\r\n      lByte, lCount;\r\n    for (lCount = 0; lCount <= 3; lCount++) {\r\n      lByte = (lValue >>> (lCount * 8)) & 255;\r\n      wordToHexValue_temp = \"0\" + lByte.toString(16);\r\n      wordToHexValue = wordToHexValue + wordToHexValue_temp.substr(wordToHexValue_temp.length - 2, 2);\r\n    }\r\n    return wordToHexValue;\r\n  };\r\n\r\n  var x = [],\r\n    k, AA, BB, CC, DD, a, b, c, d, S11 = 7,\r\n    S12 = 12,\r\n    S13 = 17,\r\n    S14 = 22,\r\n    S21 = 5,\r\n    S22 = 9,\r\n    S23 = 14,\r\n    S24 = 20,\r\n    S31 = 4,\r\n    S32 = 11,\r\n    S33 = 16,\r\n    S34 = 23,\r\n    S41 = 6,\r\n    S42 = 10,\r\n    S43 = 15,\r\n    S44 = 21;\r\n\r\n  str = this.utf8_encode(str);\r\n  x = convertToWordArray(str);\r\n  a = 0x67452301;\r\n  b = 0xEFCDAB89;\r\n  c = 0x98BADCFE;\r\n  d = 0x10325476;\r\n\r\n  xl = x.length;\r\n  for (k = 0; k < xl; k += 16) {\r\n    AA = a;\r\n    BB = b;\r\n    CC = c;\r\n    DD = d;\r\n    a = _FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);\r\n    d = _FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);\r\n    c = _FF(c, d, a, b, x[k + 2], S13, 0x242070DB);\r\n    b = _FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);\r\n    a = _FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);\r\n    d = _FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);\r\n    c = _FF(c, d, a, b, x[k + 6], S13, 0xA8304613);\r\n    b = _FF(b, c, d, a, x[k + 7], S14, 0xFD469501);\r\n    a = _FF(a, b, c, d, x[k + 8], S11, 0x698098D8);\r\n    d = _FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);\r\n    c = _FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);\r\n    b = _FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);\r\n    a = _FF(a, b, c, d, x[k + 12], S11, 0x6B901122);\r\n    d = _FF(d, a, b, c, x[k + 13], S12, 0xFD987193);\r\n    c = _FF(c, d, a, b, x[k + 14], S13, 0xA679438E);\r\n    b = _FF(b, c, d, a, x[k + 15], S14, 0x49B40821);\r\n    a = _GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);\r\n    d = _GG(d, a, b, c, x[k + 6], S22, 0xC040B340);\r\n    c = _GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);\r\n    b = _GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);\r\n    a = _GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);\r\n    d = _GG(d, a, b, c, x[k + 10], S22, 0x2441453);\r\n    c = _GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);\r\n    b = _GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);\r\n    a = _GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);\r\n    d = _GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);\r\n    c = _GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);\r\n    b = _GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);\r\n    a = _GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);\r\n    d = _GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);\r\n    c = _GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);\r\n    b = _GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);\r\n    a = _HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);\r\n    d = _HH(d, a, b, c, x[k + 8], S32, 0x8771F681);\r\n    c = _HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);\r\n    b = _HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);\r\n    a = _HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);\r\n    d = _HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);\r\n    c = _HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);\r\n    b = _HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);\r\n    a = _HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);\r\n    d = _HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);\r\n    c = _HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);\r\n    b = _HH(b, c, d, a, x[k + 6], S34, 0x4881D05);\r\n    a = _HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);\r\n    d = _HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);\r\n    c = _HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);\r\n    b = _HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);\r\n    a = _II(a, b, c, d, x[k + 0], S41, 0xF4292244);\r\n    d = _II(d, a, b, c, x[k + 7], S42, 0x432AFF97);\r\n    c = _II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);\r\n    b = _II(b, c, d, a, x[k + 5], S44, 0xFC93A039);\r\n    a = _II(a, b, c, d, x[k + 12], S41, 0x655B59C3);\r\n    d = _II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);\r\n    c = _II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);\r\n    b = _II(b, c, d, a, x[k + 1], S44, 0x85845DD1);\r\n    a = _II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);\r\n    d = _II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);\r\n    c = _II(c, d, a, b, x[k + 6], S43, 0xA3014314);\r\n    b = _II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);\r\n    a = _II(a, b, c, d, x[k + 4], S41, 0xF7537E82);\r\n    d = _II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);\r\n    c = _II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);\r\n    b = _II(b, c, d, a, x[k + 9], S44, 0xEB86D391);\r\n    a = addUnsigned(a, AA);\r\n    b = addUnsigned(b, BB);\r\n    c = addUnsigned(c, CC);\r\n    d = addUnsigned(d, DD);\r\n  }\r\n\r\n  var temp = wordToHex(a) + wordToHex(b) + wordToHex(c) + wordToHex(d);\r\n\r\n  return temp.toLowerCase();"],[1,"cycle(x, k) {\r\nvar a = x[0], b = x[1], c = x[2], d = x[3];\r\n\r\na = ff(a, b, c, d, k[0], 7, -680876936);\r\nd = ff(d, a, b, c, k[1], 12, -389564586);\r\nc = ff(c, d, a, b, k[2], 17,  606105819);\r\nb = ff(b, c, d, a, k[3], 22, -1044525330);\r\na = ff(a, b, c, d, k[4], 7, -176418897);\r\nd = ff(d, a, b, c, k[5], 12,  1200080426);\r\nc = ff(c, d, a, b, k[6], 17, -1473231341);\r\nb = ff(b, c, d, a, k[7], 22, -45705983);\r\na = ff(a, b, c, d, k[8], 7,  1770035416);\r\nd = ff(d, a, b, c, k[9], 12, -1958414417);\r\nc = ff(c, d, a, b, k[10], 17, -42063);\r\nb = ff(b, c, d, a, k[11], 22, -1990404162);\r\na = ff(a, b, c, d, k[12], 7,  1804603682);\r\nd = ff(d, a, b, c, k[13], 12, -40341101);\r\nc = ff(c, d, a, b, k[14], 17, -1502002290);\r\nb = ff(b, c, d, a, k[15], 22,  1236535329);\r\n\r\na = gg(a, b, c, d, k[1], 5, -165796510);\r\nd = gg(d, a, b, c, k[6], 9, -1069501632);\r\nc = gg(c, d, a, b, k[11], 14,  643717713);\r\nb = gg(b, c, d, a, k[0], 20, -373897302);\r\na = gg(a, b, c, d, k[5], 5, -701558691);\r\nd = gg(d, a, b, c, k[10], 9,  38016083);\r\nc = gg(c, d, a, b, k[15], 14, -660478335);\r\nb = gg(b, c, d, a, k[4], 20, -405537848);\r\na = gg(a, b, c, d, k[9], 5,  568446438);\r\nd = gg(d, a, b, c, k[14], 9, -1019803690);\r\nc = gg(c, d, a, b, k[3], 14, -187363961);\r\nb = gg(b, c, d, a, k[8], 20,  1163531501);\r\na = gg(a, b, c, d, k[13], 5, -1444681467);\r\nd = gg(d, a, b, c, k[2], 9, -51403784);\r\nc = gg(c, d, a, b, k[7], 14,  1735328473);\r\nb = gg(b, c, d, a, k[12], 20, -1926607734);\r\n\r\na = hh(a, b, c, d, k[5], 4, -378558);\r\nd = hh(d, a, b, c, k[8], 11, -2022574463);\r\nc = hh(c, d, a, b, k[11], 16,  1839030562);\r\nb = hh(b, c, d, a, k[14], 23, -35309556);\r\na = hh(a, b, c, d, k[1], 4, -1530992060);\r\nd = hh(d, a, b, c, k[4], 11,  1272893353);\r\nc = hh(c, d, a, b, k[7], 16, -155497632);\r\nb = hh(b, c, d, a, k[10], 23, -1094730640);\r\na = hh(a, b, c, d, k[13], 4,  681279174);\r\nd = hh(d, a, b, c, k[0], 11, -358537222);\r\nc = hh(c, d, a, b, k[3], 16, -722521979);\r\nb = hh(b, c, d, a, k[6], 23,  76029189);\r\na = hh(a, b, c, d, k[9], 4, -640364487);\r\nd = hh(d, a, b, c, k[12], 11, -421815835);\r\nc = hh(c, d, a, b, k[15], 16,  530742520);\r\nb = hh(b, c, d, a, k[2], 23, -995338651);\r\n\r\na = ii(a, b, c, d, k[0], 6, -198630844);\r\nd = ii(d, a, b, c, k[7], 10,  1126891415);\r\nc = ii(c, d, a, b, k[14], 15, -1416354905);\r\nb = ii(b, c, d, a, k[5], 21, -57434055);\r\na = ii(a, b, c, d, k[12], 6,  1700485571);\r\nd = ii(d, a, b, c, k[3], 10, -1894986606);\r\nc = ii(c, d, a, b, k[10], 15, -1051523);\r\nb = ii(b, c, d, a, k[1], 21, -2054922799);\r\na = ii(a, b, c, d, k[8], 6,  1873313359);\r\nd = ii(d, a, b, c, k[15], 10, -30611744);\r\nc = ii(c, d, a, b, k[6], 15, -1560198380);\r\nb = ii(b, c, d, a, k[13], 21,  1309151649);\r\na = ii(a, b, c, d, k[4], 6, -145523070);\r\nd = ii(d, a, b, c, k[11], 10, -1120210379);\r\nc = ii(c, d, a, b, k[2], 15,  718787259);\r\nb = ii(b, c, d, a, k[9], 21, -343485551);\r\n\r\nx[0] = add32(a, x[0]);\r\nx[1] = add32(b, x[1]);\r\nx[2] = add32(c, x[2]);\r\nx[3] = add32(d, x[3]);\r\n\r\n}\r\n\r\nfunction cmn(q, a, b, x, s, t) {\r\na = add32(add32(a, q), add32(x, t));\r\nreturn add32((a << s) | (a >>> (32 - s)), b);\r\n}\r\n\r\nfunction ff(a, b, c, d, x, s, t) {\r\nreturn cmn((b & c) | ((~b) & d), a, b, x, s, t);\r\n}\r\n\r\nfunction gg(a, b, c, d, x, s, t) {\r\nreturn cmn((b & d) | (c & (~d)), a, b, x, s, t);\r\n}\r\n\r\nfunction hh(a, b, c, d, x, s, t) {\r\nreturn cmn(b ^ c ^ d, a, b, x, s, t);\r\n}\r\n\r\nfunction ii(a, b, c, d, x, s, t) {\r\nreturn cmn(c ^ (b | (~d)), a, b, x, s, t);\r\n}\r\n\r\nfunction md51(s) {\r\ntxt = '';\r\nvar n = s.length,\r\nstate = [1732584193, -271733879, -1732584194, 271733878], i;\r\nfor (i=64; i<=s.length; i+=64) {\r\nmd5cycle(state, md5blk(s.substring(i-64, i)));\r\n}\r\ns = s.substring(i-64);\r\nvar tail = [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0];\r\nfor (i=0; i<s.length; i++)\r\ntail[i>>2] |= s.charCodeAt(i) << ((i%4) << 3);\r\ntail[i>>2] |= 0x80 << ((i%4) << 3);\r\nif (i > 55) {\r\nmd5cycle(state, tail);\r\nfor (i=0; i<16; i++) tail[i] = 0;\r\n}\r\ntail[14] = n*8;\r\nmd5cycle(state, tail);\r\nreturn state;\r\n}\r\n\r\n/* there needs to be support for Unicode here,\r\n * unless we pretend that we can redefine the MD-5\r\n * algorithm for multi-byte characters (perhaps\r\n * by adding every four 16-bit characters and\r\n * shortening the sum to 32 bits). Otherwise\r\n * I suggest performing MD-5 as if every character\r\n * was two bytes--e.g., 0040 0025 = @%--but then\r\n * how will an ordinary MD-5 sum be matched?\r\n * There is no way to standardize text to something\r\n * like UTF-8 before transformation; speed cost is\r\n * utterly prohibitive. The JavaScript standard\r\n * itself needs to look at this: it should start\r\n * providing access to strings as preformed UTF-8\r\n * 8-bit unsigned value arrays.\r\n */\r\nfunction md5blk(s) { /* I figured global was faster.   */\r\nvar md5blks = [], i; /* Andy King said do it this way. */\r\nfor (i=0; i<64; i+=4) {\r\nmd5blks[i>>2] = s.charCodeAt(i)\r\n+ (s.charCodeAt(i+1) << 8)\r\n+ (s.charCodeAt(i+2) << 16)\r\n+ (s.charCodeAt(i+3) << 24);\r\n}\r\nreturn md5blks;\r\n}\r\n\r\nvar hex_chr = '0123456789abcdef'.split('');\r\n\r\nfunction rhex(n)\r\n{\r\nvar s='', j=0;\r\nfor(; j<4; j++)\r\ns += hex_chr[(n >> (j * 8 + 4)) & 0x0F]\r\n+ hex_chr[(n >> (j * 8)) & 0x0F];\r\nreturn s;\r\n}\r\n\r\nfunction hex(x) {\r\nfor (var i=0; i<x.length; i++)\r\nx[i] = rhex(x[i]);\r\nreturn x.join('');\r\n}\r\n\r\nfunction md5(s) {\r\nreturn hex(md51(s));\r\n}\r\n\r\n/* this function is much faster,\r\nso if possible we use it. Some IEs\r\nare the only ones I know of that\r\nneed the idiotic second function,\r\ngenerated by an if clause.  */\r\n\r\nfunction add32(a, b) {\r\nreturn (a + b) & 0xFFFFFFFF;\r\n}\r\n\r\nif (md5('hello') != '5d41402abc4b2a76b9719d911017c592') {\r\nfunction add32(x, y) {\r\nvar lsw = (x & 0xFFFF) + (y & 0xFFFF),\r\nmsw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\nreturn (msw << 16) | (lsw & 0xFFFF);\r\n}"],[0,"\r\n}"]],"start1":8,"start2":8,"length1":7869,"length2":5685}]],"length":5693,"saved":false}
